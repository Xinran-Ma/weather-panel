{"version":3,"sources":["CurrentWeather/currentWeatherReducer.js","ForecastWeather/forecastWeatherReducer.js","Location/locationReducer.js","RetrieveNews/newsReducer.js","sumReducers.js","CurrentWeather/index.js","ForecastWeather/index.js","GetWeatherIcon/index.js","RetrieveNews/index.js","Location/index.js","CurrentWeather/fetchToday.js","ForecastWeather/fetchForecast.js","RetrieveNews/fetchNews.js","App.js","index.js"],"names":["currentWeatherReducer","state","action","type","console","log","value","todayTemp","Math","ceil","main","temp","todaySky","weather","todayHumidity","humidity","todayWind","wind","speed","forecastWeatherReducer","locationReducer","newsReducer","rootReducer","combineReducers","currentWeather","CurrentWeatherReducer","forecast","ForecastWeatherReducer","location","LocationReducer","country","news","NewsReducer","CurrentWeather","className","ForecastWeather","map","singleItem","indexOf","key","dt","src","alt","description","RetrieveNews","singleNews","index","href","url","target","rel","title","publishedAt","substring","author","Location","onClick","updateSydney","updateTokyo","updateBeijing","updateLondon","fetchToday","dispatch","fetch","then","response","json","today","catch","e","fetchForecast","list","fetchNews","articles","UPDATE_LOCATION","UPDATE_COUNTRY","store","createStore","sumReducers","applyMiddleware","thunk","ConnectedCurrentWeather","connect","ConnectedForecastWeather","ConnectedLocation","ConnectedNews","App","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.48204441.chunk.js","sourcesContent":["const currentWeatherReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'UPDATE_CURRENT_WEATHER':\n      console.log(action.value);\n      return {\n        todayTemp: Math.ceil(action.value.main.temp) + '°C', \n        todaySky: action.value.weather[0].main,\n        todayHumidity: action.value.main.humidity + '%',\n        todayWind: Math.ceil(action.value.wind.speed * 3.6) + 'KM/h',\n      };\n    default: \n      return state;\n  }\n}\n\nexport default currentWeatherReducer;","const forecastWeatherReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'UPDATE_FORECAST_WEATHER':\n      return [\n        ...action.value\n      ];\n    default: \n      return state;\n  }\n}\n\nexport default forecastWeatherReducer;","const locationReducer = (state = '', action) => {\n  switch (action.type) {\n    case 'UPDATE_LOCATION':\n      return action.value;\n    default: \n      return state;\n  }\n}\n\nexport const CountryReducer = (state = '', action) => {\n  switch (action.type) {\n\n    case 'UPDATE_COUNTRY':\n      return action.value;\n    default: \n      return state;\n  }\n}\n\nexport default locationReducer;","const newsReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'UPDATE_NEWS':\n      return [\n        ...action.value\n      ];\n    default: \n      return state;\n  }\n}\n\nexport default newsReducer;","import { combineReducers } from 'redux';\n\nimport CurrentWeatherReducer from './CurrentWeather/currentWeatherReducer';\nimport ForecastWeatherReducer from './ForecastWeather/forecastWeatherReducer';\nimport LocationReducer from './Location/locationReducer';\nimport { CountryReducer } from './Location/locationReducer';\nimport NewsReducer from './RetrieveNews/newsReducer';\n\nconst rootReducer = combineReducers({\n  currentWeather: CurrentWeatherReducer,\n  forecast: ForecastWeatherReducer,\n  location: LocationReducer,\n  country: CountryReducer,\n  news: NewsReducer\n})\n\nexport default rootReducer;","import React from \"react\";\n\nconst CurrentWeather = ({currentWeather}) => {\n  return (\n    <div className=\"current-weather\">\n      <div className=\"current-weather__top-area\">\n        <p className=\"temperature\">{currentWeather.todayTemp}</p>\n        <p className=\"weather-description\">{currentWeather.todaySky}</p>\n      </div>\n      <div className=\"current-weather__bottom-area\">\n        <div className=\"humidity\">\n          <p className=\"humidity-title\">Humidity</p>\n          <p className=\"humidity-data\">{currentWeather.todayHumidity}</p>\n        </div>\n        <div className=\"wind\">\n          <p className=\"wind-title\">Wind</p>\n          <p className=\"wind-data\">{currentWeather.todayWind}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CurrentWeather;","import React from \"react\";\nimport getWeatherIcon from '../GetWeatherIcon'\n\nconst ForecastWeather = ({forecast}) => {\n  return (\n    <div className=\"forecast-weather\">\n    {\n      forecast.map((singleItem) => (forecast.indexOf(singleItem) + 1) % 8 === 0 ? (\n        <div key={singleItem.dt} className=\"forecast-single\">\n          \n          <h2 className=\"forecast-weather--status\">{singleItem.weather[0].main}</h2>\n          <p className=\"forecast-weather--temperature\">{Math.ceil(singleItem.main.temp) + '°C'}</p>\n          <img className=\"forecast-weather--sky\" src={getWeatherIcon(singleItem.weather[0].main)} alt={singleItem.weather[0].main}/>\n          <p className=\"forecast-weather--sky-description\">{singleItem.weather[0].description}</p>\n        </div>\n      ) : true\n      )\n    }\n    </div>\n  )\n}\n\nexport default ForecastWeather;","export default function getWeatherIcon(weather) {\n  if( weather === 'Clear'){\n    return 'https://image.flaticon.com/icons/svg/890/890347.svg';\n  }else if( weather === 'Rain' ){\n    return 'https://image.flaticon.com/icons/svg/728/728104.svg';\n  }else if( weather === 'Thunderstorm'){\n    return 'https://image.flaticon.com/icons/svg/728/728120.svg';\n  }else if( weather === 'Drizzle'){\n    return 'https://image.flaticon.com/icons/svg/728/728117.svg';\n  }else if( weather === 'Snow'){\n    return 'https://image.flaticon.com/icons/svg/728/728113.svg';\n  }else if( weather === 'Clouds'){\n    return 'https://image.flaticon.com/icons/svg/728/728070.svg';\n  }else{\n    return 'https://image.flaticon.com/icons/svg/728/728152.svg';\n  }\n};","import React from \"react\";\n\nconst RetrieveNews = ({news}) => {\n  return (\n    <div className=\"news\">\n      {news.map((singleNews, index) => (\n        <div className=\"single-news\" key={index}>\n          <a href={singleNews.url} target=\"_blank\" rel=\"noopener noreferrer\"><h4 className=\"news-title\">{singleNews.title}</h4></a>\n          <p className=\"published-time\">{singleNews.publishedAt.substring(0, 10)} | {singleNews.author}</p>\n          <p className=\"news-description\">{singleNews.description}</p>\n        </div>\n        ))\n      }\n    </div>\n    \n  )\n}\n\nexport default RetrieveNews;","import React from 'react';\nimport { updateSydney, updateTokyo, updateBeijing, updateLondon } from '../App';\n\nconst Location = ({location}) => {\n  return (\n    <div className=\"location\">\n      <p className=\"location__name\">{location}</p>\n      <ul className=\"location__list\">\n        <li onClick={updateSydney} key=\"Sydney\">Sydney</li>\n        <li onClick={updateTokyo} key=\"Tokyo\">Tokyo</li>\n        <li onClick={updateBeijing} key=\"Beijing\">Beijing</li>\n        <li onClick={updateLondon} key=\"London\">London</li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Location;","const UPDATE_CURRENT_WEATHER = \"UPDATE_CURRENT_WEATHER\";\nconst FETCH_ADD_FAILED = \"FETCH_ADD_FAILED\";\n\nconst fetchToday = (location) => dispatch => {\n  return fetch(\"https://api.openweathermap.org/data/2.5/weather?APPID=79f2614dda20dcff14201b1cf1762e02&units=metric&q=\" + location)\n    .then(response => response.json())\n    .then(today => {\n      dispatch({\n        type: UPDATE_CURRENT_WEATHER,\n        value: today\n      }).then(console.log(today));\n    })\n    .catch(e => {\n      dispatch({\n        type: FETCH_ADD_FAILED,\n        e: e\n      });\n    });\n};\n\n// const dispatchFetchToday = dispatch(fetchToday())\n\nexport default fetchToday;","const UPDATE_FORECAST_WEATHER = \"UPDATE_FORECAST_WEATHER\";\nconst FETCH_ADD_FAILED = \"FETCH_ADD_FAILED\";\n\nconst fetchForecast = (location) => dispatch => {\n  return fetch(\"https://api.openweathermap.org/data/2.5/forecast?APPID=79f2614dda20dcff14201b1cf1762e02&units=metric&q=\" + location)\n    .then(response => response.json())\n    .then(forecast => {\n      dispatch({\n        type: UPDATE_FORECAST_WEATHER,\n        value: forecast.list\n      }).then(console.log(forecast));\n    })\n    .catch(e => {\n      dispatch({\n        type: FETCH_ADD_FAILED,\n        e: e\n      });\n    });\n};\n\n\nexport default fetchForecast;","const UPDATE_NEWS = \"UPDATE_NEWS\";\nconst FETCH_NEWS_FAILED = \"FETCH_NEWS_FAILED\";\n\nconst fetchNews = (country) => dispatch => {\n  return fetch(\"https://newsapi.org/v2/top-headlines?apiKey=e0591bcd152f4ee0957aadb4c1351791&pagesize=10&country=\" + country)\n  .then(response => response.json())\n  .then(news => {\n    dispatch({\n      type: UPDATE_NEWS,\n      value: news.articles\n    }).then(console.log(news.articles));\n  })\n  .catch(e => {\n    dispatch({\n      type: FETCH_NEWS_FAILED,\n      e: e\n    });\n  });\n};\n\nexport default fetchNews;","import React from 'react';\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { connect, Provider } from 'react-redux';\n\nimport sumReducers from './sumReducers';\nimport CurrentWeather from './CurrentWeather';\nimport ForecastWeather from './ForecastWeather';\nimport RetrieveNews from './RetrieveNews'\n\nimport Location from './Location';\nimport fetchToday from './CurrentWeather/fetchToday';\nimport fetchForecast from './ForecastWeather/fetchForecast';\nimport fetchNews from './RetrieveNews/fetchNews';\n\nconst UPDATE_LOCATION = 'UPDATE_LOCATION';\nconst UPDATE_COUNTRY = 'UPDATE_COUNTRY';\n\nlet store = createStore(sumReducers, applyMiddleware(thunk));\n// store.subscribe(() => console.log(store.getState()));\nstore.dispatch(updateSydney);\n\n/****************\n * Implement Data Update Actions\n ***************/\nexport function updateSydney() {\n  store.dispatch({type: UPDATE_LOCATION, value: 'Sydney'});\n  store.dispatch({type: UPDATE_COUNTRY, value: 'AU'});\n  store.dispatch(fetchToday('Sydney'));\n  store.dispatch(fetchForecast('Sydney'));\n  store.dispatch(fetchNews('AU'));\n};\n\nexport function updateTokyo() {\n  store.dispatch({type: UPDATE_LOCATION, value: 'Tokyo'})\n  store.dispatch({type: UPDATE_COUNTRY, value: 'JP'});\n  store.dispatch(fetchToday('Tokyo'));\n  store.dispatch(fetchForecast('Tokyo'));\n  store.dispatch(fetchNews('JP'));\n};\n\nexport function updateBeijing() {\n  store.dispatch({type: UPDATE_LOCATION, value: 'Beijing'})\n  store.dispatch({type: UPDATE_COUNTRY, value: 'CN'});\n  store.dispatch(fetchToday('Beijing'));\n  store.dispatch(fetchForecast('Beijing'));\n  store.dispatch(fetchNews('CN'));\n  \n};\n\nexport function updateLondon() {\n  store.dispatch({type: UPDATE_LOCATION, value: 'London'})\n  store.dispatch({type: UPDATE_COUNTRY, value: 'GB'});\n  store.dispatch(fetchToday('London'));\n  store.dispatch(fetchForecast('London'));\n  store.dispatch(fetchNews('GB'));\n};\n\n\n/****************\n * Add Connection Between UI & Store\n ***************/\n\nconst ConnectedCurrentWeather = connect(\n  state => state\n)(CurrentWeather);\n\nconst ConnectedForecastWeather = connect(\n  state => state\n)(ForecastWeather);\n\nconst ConnectedLocation = connect(\n  state => state\n)(Location);\n\nconst ConnectedNews = connect(\n  state => state\n)(RetrieveNews);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div id=\"weather-panel\">\n        <div className=\"top-area\">\n          <ConnectedCurrentWeather />\n          <ConnectedLocation />\n        </div>\n        <div className=\"bottom-area\">\n          <ConnectedNews />\n          <ConnectedForecastWeather />\n        </div>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport './index.scss';\nimport App from './App';\nimport sumReducers from './sumReducers';\n\nconst store = createStore(sumReducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , \n  document.getElementById('root')\n  );"],"sourceRoot":""}